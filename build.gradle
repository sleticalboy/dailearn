// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
  ext {
    kotlin_version = '1.8.21'
    compile_version = 33
    build_version = '33.0.3'
    min_version = 21
    target_version = 33
    gradle_version = '7.1.0'
    appcompat_version = '1.6.1'
    ktx_version = '1.10.1'
    constraint_version = '2.1.4'
    material_version = '1.6.1'
    lifecycle_version = '2.2.0'
    multidex_version = '2.0.1'
    leakcanary_version = '2.11'
    recyclerview_version = '1.3.0'
    retrofit_version = '2.9.0'
    fastjson_version = '2.0.10.graal'
    okhttp_version = '5.0.0-alpha.10'
    rxjava_adapter_version = '1.0.0'
    glide_version = '4.15.1'
    glide_transtormation_version = '3.3.0'
    exif_interface = '1.3.6'
    lottie_version = '6.0.0'
    gson = '2.10.1'
    okio = '2.2.2'
  }

  repositories {
    google()
    mavenCentral()
  }
  dependencies {
    classpath "com.android.tools.build:gradle:$gradle_version"
    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

    // NOTE: Do not place your application dependencies here; they belong
    // in the individual module build.gradle files
  }
}

allprojects {
  repositories {
    google()
    mavenCentral()
  }

  configurations.all {
    resolutionStrategy.force 'androidx.annotation:annotation:1.3.0'
    resolutionStrategy.force 'androidx.annotation:annotation-experimental:1.3.0'
    resolutionStrategy.force 'androidx.arch.core:core-runtime:2.1.0'
    resolutionStrategy.force 'androidx.core:core:1.10.0'
    resolutionStrategy.force 'androidx.core:core-ktx:1.10.0'
    resolutionStrategy.force 'androidx.lifecycle:lifecycle-livedata:2.2.0'
    resolutionStrategy.force 'androidx.lifecycle:lifecycle-process:2.4.1'
    resolutionStrategy.force 'androidx.exifinterface:exifinterface:1.3.6'
    resolutionStrategy.force 'androidx.customview:customview:1.1.0'
    resolutionStrategy.force 'androidx.constraintlayout:constraintlayout:2.1.4'
    resolutionStrategy.force 'androidx.recyclerview:recyclerview:1.3.0'
    resolutionStrategy.force 'androidx.drawerlayout:drawerlayout:1.1.1'
    resolutionStrategy.force 'org.jetbrains.kotlin:kotlin-stdlib:1.8.21'
    resolutionStrategy.force 'org.jetbrains.kotlin:kotlin-stdlib-common:1.8.21'
    resolutionStrategy.force 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.21'
    resolutionStrategy.force 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.21'
    // resolutionStrategy.force 'org.jetbrains.kotlin:kotlin-android-extensions-runtime:1.5.10'
    resolutionStrategy.force 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.1'
    resolutionStrategy.force 'org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.7.1'
    resolutionStrategy.force 'org.jetbrains:annotations:23.0.0'
    // resolutionStrategy.force 'junit:junit:4.12'
    // resolutionStrategy.force 'com.squareup.okio:okio:2.2.2'
    resolutionStrategy.force 'com.google.code.gson:gson:2.10.1'
  }
}

// 定义函数递归输出目录下的文件
def printRecurse(/*File*/ file) {
  if (file.isDirectory()) {
    println('' + file + ' -> dir')
    file.listFiles().each {
      printRecurse(it)
    }
  } else {
    println file
  }
}

// 定义一个 task
// group: 对任务进行分组(否则就出现在 other 分组中)
// description: 描述任务的职责
task printBuildDir(description: 'print build files', group: 'custom') {
  println 'printBuildDir() started'
  printRecurse(rootProject.buildDir)
  println 'printBuildDir() finished'
}

allprojects {
  try {
    tasks.findByName('clean') {
      doLast {
        try {
          delete(file('build'))
          delete(file('.gradle'))
          delete(file('.cxx'))
        } catch (Throwable ignored) {
        }
      }
    }
  } catch (Throwable ignored) {
  }
}
